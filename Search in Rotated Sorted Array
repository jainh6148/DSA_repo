class Solution {
public:
     int findPivot(vector<int>& nums, int target)
     {
         int s = 0;
         int e = nums.size()-1;
         int m = s+(e-s)/2;
         
         while(s<e)
         {
             if(nums[m] >= nums[0])
             {
                 s = m+1;
             }
             else
             {
                 e = m;
             }
             m = s+(e-s)/2;
         }
         return s;
        }
    int BinarySearch(vector<int>& nums, int target, int s, int e)
    {
        int m = s+(e-s)/2;
        int ans = -1;
        while(s<=e)
        {
            if(nums[m] == target)
            {
                return m;
            }
            
            else if(nums[m] > target)
            {
                e = m-1;
            }
            else{
                s = m+1;
            }
            m = s+(e-s)/2;
        }
        return -1;
    }
    
    int search(vector<int>& nums, int target) {
        int s = 0;
        int e = nums.size()-1;
        int m = s+(e-s)/2;
        
        int pivot = findPivot(nums,target);
        
        if(nums[pivot] <=  target  && target <= nums[e])
        {
            return BinarySearch(nums, target, pivot, e);
        }
        
        else
        {
            return BinarySearch(nums, target, 0, pivot-1);  
        }
    }
     
        
};
